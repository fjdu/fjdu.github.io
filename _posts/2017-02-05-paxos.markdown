---
layout: post
title:  "理解 Paxos"
date:   2017-02-05 Sun 22:53:06
categories: algorithm
---

<b>译自 Leslie Lamport 2001, Paxos Made simple</b>

---

<br>

# 1. 引言

用来实现容错分布式系统的 Paxos 算法被认为是难以理解的，但实际上它是分布式算法里最简单和最显然的。其核心是一个共识算法。下一节表明，在满足几条必须具备的性质的前提下，这个算法几乎是不可避免的。通过使用状态机的方法来构建一个分布式系统，并且把共识算法应用到这个系统，可以得到完整的 Paxos 算法。这个方法很有名，因为分布式系统领域引用貌似最多的那篇文章的主题就是它。

# 2. 共识算法

## 2.1 问题

假定有一系列可以提议数值的过程。共识算法保证提议的数值里只有一个被选中。如果没有数值被提议，则不会有数值被选中。如果有数值被选中，则那些进程能知晓选中的数值。共识的安全性要求是

- 只有被提议过的数值才能被选中，
- 只能选中单个数值，
- 仅当一个数值真的被选中时，进程才知晓这个值被选中了。

我们让三类代理来实施这三种角色：提议者，接受者，学习者。具体实现中，单个进程可能执行多种任务，但目前我们不需要管这种细节。

假定代理之间通过发送消息互相交流。我们使用惯常的异步、非拜占庭模型，也就是：

- 代理的工作速度是任意的，并且有可能停止或者重启。由于所有代理都可能在一个值被选中后挂掉然后重启，除非挂掉重启的代理能记住一些信息，否则解决方案是不可能存在的。
- 消息的传递可能需要任意长的时间，消息有可能会重复、丢失，但不会被损坏。

## 2.2 选一个数值

选取一个数值的最简单方法是只有一个接受者的情况。提议者向接受者发出提议，接受者选取第一个收到的数值。尽管简单，这个方案不令人满意，因为接受者如果挂掉，接下来的事情就进行不下去了。

那么我们换一种方法。假设我们有多个接受者。提议者向接受者集合发出一个提议值。接受者可以接受提出的值。仅当足够多的接受者接受了一个值，才认为这个值被选中了。多少算足够多？为了保证只有一个数值被选中，我们可以让任何由多数代理组成的集合满足条件。由于任何多数集至少有一个公共接受者，那么只要接受者最多接受一个数值，这个方法就是可行的。

在没有机器挂掉或者信息丢失的情况下，我们要求，就算只有一个提议者提出了一个数值，这个值应当被选中。也就是说：

P1. 接受者必须接受它收到的第一个数值。

但这带来一个问题。不同的提议者可能在几乎相同的时间提出几个数值，导致每个接受者都接受了一个数值，但没有一个数值是被多数派接受的。就算只有两个提议的数值，如果每个被大约半数接受，那么单个接受者的挂掉就会让知晓到底那个数值被选中称为不可能。


